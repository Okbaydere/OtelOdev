@model OtelUI.Models.ReservationCreateViewModel
@{
    ViewBag.Title = "Yeni Rezervasyon Oluştur";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<meta charset="utf-8" />
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

<div class="container mt-4">
    <div class="card">
        <div class="card-header bg-primary text-white">
            <h2><i class="fas fa-calendar-alt"></i> Rezervasyon Oluştur</h2>
        </div>
        <div class="card-body">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                if (!ViewData.ModelState.IsValid)
                {
                    <div class="alert alert-danger">
                        @Html.ValidationSummary(true)
                    </div>
                }

                <div class="row">
                    <!-- Sol Kolon - Kişisel Bilgiler -->
                    <div class="col-md-6">
                        <div class="card mb-4">
                            <div class="card-header bg-info text-white">
                                <h4><i class="fas fa-user"></i> Kişisel Bilgiler</h4>
                            </div>
                            <div class="card-body">
                                <div class="form-group mb-3">
                                    <label for="FirstName">Adınız:</label>
                                    @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control", required = "required" })
                                </div>
                                <div class="form-group mb-3">
                                    <label for="LastName">Soyadınız:</label>
                                    @Html.TextBoxFor(m => m.LastName, new { @class = "form-control", required = "required" })
                                </div>
                                <div class="form-group mb-3">
                                    <label for="CustomerTc">T.C. Kimlik No:</label>
                                    @Html.TextBoxFor(m => m.CustomerTc, new { @class = "form-control", required = "required", pattern = "[0-9]{11}", title = "TC Kimlik No 11 haneli olmalıdır" })
                                </div>
                                <div class="form-group mb-3">
                                    <label for="CustomerTel">Telefon:</label>
                                    @Html.TextBoxFor(m => m.CustomerTel, new { @class = "form-control", required = "required", type = "tel" })
                                </div>
                                <div class="form-group mb-3">
                                    <label for="CustomermMail">E-posta:</label>
                                    @Html.TextBoxFor(m => m.CustomermMail, new { @class = "form-control", required = "required", type = "email" })
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Sağ Kolon - Rezervasyon Detayları -->
                    <div class="col-md-6">
                        <div class="card mb-4">
                            <div class="card-header bg-warning text-dark">
                                <h4><i class="fas fa-bed"></i> Rezervasyon Detayları</h4>
                            </div>
                            <div class="card-body">
                                <div class="form-group mb-3">
                                    <label for="EnterDate">Giriş Tarihi:</label>
                                    @Html.TextBoxFor(m => m.EnterDate, new { @class = "form-control", type = "date", required = "required" })
                                </div>
                                <div class="form-group mb-3">
                                    <label for="ExitDate">Çıkış Tarihi:</label>
                                    @Html.TextBoxFor(m => m.ExitDate, new { @class = "form-control", type = "date", required = "required" })
                                </div>
                                <div class="form-group mb-3">
                                    <label for="PersonNumber">Kişi Sayısı:</label>
                                    @Html.TextBoxFor(m => m.PersonNumber, new { @class = "form-control", type = "number", min = "1", required = "required" })
                                </div>
                                <div class="form-group mb-3">
                                    <label for="RoomTypeId">Oda Tipi:</label>
                                    @Html.DropDownListFor(m => m.RoomTypeId,
                                        new SelectList(Model.RoomTypes ?? new List<Entities.Concreate.RoomType>(), "RoomTypeId", "TypeName"),
                                        "Oda Tipi Seçiniz",
                                        new { @class = "form-control", required = "required", disabled = "disabled", id = "RoomTypeId" })
                                    <small class="text-muted" id="roomTypeMessage">Lütfen önce giriş ve çıkış tarihlerini seçiniz.</small>
                                    <small class="text-muted" id="roomAvailabilityMessage"></small>
                                </div>
                                @Html.HiddenFor(m => m.SelectedRoomId)
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Ek Hizmetler -->
                <div class="card mb-4">
                    <div class="card-header bg-secondary text-white">
                        <h4><i class="fas fa-concierge-bell"></i> Ek Hizmetler</h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @if (Model.AdditionalServices != null)
                            {
                                foreach (var service in Model.AdditionalServices)
                                {
                                    <div class="col-md-4 mb-3">
                                        <div class="form-check">
                                            <input type="checkbox" 
                                                   class="form-check-input" 
                                                   name="SelectedAdditionalServiceIDs" 
                                                   value="@service.AdditionalServiceID"
                                                   data-price="@service.ServicePrice" />
                                            <label class="form-check-label">
                                                @service.ServiceName (@service.ServicePrice.Value.ToString("N2") TL)
                                            </label>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="col-12">
                                    <p class="text-muted">Ek hizmet bulunamadı.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
              

                <!-- Fiyat Özeti -->
                <div class="card mb-4">
                    <div class="card-header bg-success text-white">
                        <h4><i class="fas fa-money-bill-wave"></i> Fiyat Özeti</h4>
                    </div>
                    <div class="card-body">
                        <div id="priceDetails"></div>
                        <h3 class="text-end">Toplam: <span id="totalPrice">0 TL</span></h3>
                    </div>
                </div>

                <div class="text-center">
                    <button type="submit" id="submitReservation" class="btn btn-primary btn-lg">
                        <i class="fas fa-calendar-check"></i> Rezervasyonu Onayla
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // URL'den parametreleri al
            function getUrlParameter(name) {
                name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
                var results = regex.exec(location.search);
                return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
            }

            // Eğer URL'de tarih ve oda tipi parametreleri varsa, bunları otomatik seç
            var preSelectedEnterDate = getUrlParameter('enterDate');
            var preSelectedExitDate = getUrlParameter('exitDate');
            var preSelectedRoomTypeId = getUrlParameter('roomTypeId');

            if (preSelectedEnterDate) {
                $("#EnterDate").val(preSelectedEnterDate);
            }
            if (preSelectedExitDate) {
                $("#ExitDate").val(preSelectedExitDate);
            }
            if (preSelectedRoomTypeId) {
                $("#RoomTypeId").val(preSelectedRoomTypeId);
            }

            // Eğer tüm ön seçimler varsa, oda kontrolünü başlat
            if (preSelectedEnterDate && preSelectedExitDate && preSelectedRoomTypeId) {
                checkDatesAndEnableSelections();
            }

            // Çift gönderimi önle
            var formSubmitted = false;
            $('form').on('submit', function(e) {
                if (formSubmitted) {
                    e.preventDefault();
                    return false;
                }
                formSubmitted = true;
                $('#submitReservation').prop('disabled', true).html('<i class="fas fa-spinner fa-spin"></i> İşleniyor...');
                return true;
            });

            // Tarihlerin geçerli olup olmadığını kontrol et
            function areDatesValid() {
                var startDate = new Date($("#EnterDate").val());
                var endDate = new Date($("#ExitDate").val());
                var today = new Date();
                today.setHours(0, 0, 0, 0);
                
                if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
                    return false;
                }
                
                if (startDate < today) {
                    alert("Giriş tarihi bugünden önce olamaz!");
                    return false;
                }
                
                if (endDate <= startDate) {
                    alert("Çıkış tarihi giriş tarihinden sonra olmalıdır!");
                    return false;
                }
                
                return true;
            }

            // Oda tipi ve oda seçimini kontrol et
            function checkDatesAndEnableSelections() {
                var $roomTypeSelect = $("#RoomTypeId");
                var $roomTypeMessage = $("#roomTypeMessage");

                // Tarih kontrolü
                if (areDatesValid()) {
                    $roomTypeSelect.prop('disabled', false);
                    $roomTypeMessage.text('Lütfen bir oda tipi seçiniz.');
                    $roomTypeMessage.removeClass('text-danger').addClass('text-muted');
                } else {
                    $roomTypeSelect.prop('disabled', true);
                    $roomTypeMessage.text('Lütfen önce geçerli giriş ve çıkış tarihlerini seçiniz.');
                    $roomTypeMessage.removeClass('text-muted').addClass('text-danger');
                    $roomTypeSelect.val('');
                }

                loadAvailableRooms();
            }

            // Tarih değişikliklerini dinle
            $("#EnterDate, #ExitDate").change(function() {
                checkDatesAndEnableSelections();
            });

            // Oda tipi değişikliğini dinle
            $("#RoomTypeId").change(function() {
                loadAvailableRooms();
            });

            // Seçilen tarihlere ve oda tipine göre uygun odaları getir
            function loadAvailableRooms() {
                var roomTypeId = $("#RoomTypeId").val();
                var startDate = $("#EnterDate").val();
                var endDate = $("#ExitDate").val();
                var $roomAvailabilityMessage = $("#roomAvailabilityMessage");
                var $selectedRoomId = $("#SelectedRoomId");
                
                if (!roomTypeId || roomTypeId === "Oda Tipi Seçiniz") {
                    $selectedRoomId.val('');
                    $roomAvailabilityMessage.text("");
                    return;
                }
                
                if (!areDatesValid()) {
                    $selectedRoomId.val('');
                    $roomAvailabilityMessage.text("");
                    return;
                }
                
                // Yükleniyor göster
                $roomAvailabilityMessage.removeClass("text-danger text-success").addClass("text-muted").text("Oda müsaitliği kontrol ediliyor...");
                
                $.ajax({
                    url: '@Url.Action("GetAvailableRooms")',
                    type: 'GET',
                    data: {
                        roomTypeId: roomTypeId,
                        startDate: startDate,
                        endDate: endDate
                    },
                    success: function (data) {
                        if (data.success) {
                            if (data.rooms && data.rooms.length > 0) {
                                // Otomatik olarak ilk müsait odayı seç
                                $selectedRoomId.val(data.rooms[0].RoomId);
                                $roomAvailabilityMessage.removeClass("text-muted text-danger").addClass("text-success")
                                    .text("Seçilen tarihler için uygun oda bulundu!");
                            } else {
                                $selectedRoomId.val('');
                                $roomAvailabilityMessage.removeClass("text-muted text-success").addClass("text-danger")
                                    .text("Seçilen tarih aralığında uygun oda bulunamadı.");
                            }
                        } else {
                            $selectedRoomId.val('');
                            $roomAvailabilityMessage.removeClass("text-muted text-success").addClass("text-danger")
                                .text("Hata: " + (data.message || "Oda müsaitliği kontrol edilemedi."));
                        }
                    },
                    error: function () {
                        $selectedRoomId.val('');
                        $roomAvailabilityMessage.removeClass("text-muted text-success").addClass("text-danger")
                            .text("Sunucu hatası: Oda müsaitliği kontrol edilemedi.");
                    }
                });
            }

            // Tüm fiyat hesaplama fonksiyonunu tanımlayalım
            function calculateTotalPrice() {
                var roomTypeId = $("#RoomTypeId").val();
                var selectedServices = [];
                $('input[name="SelectedAdditionalServiceIDs"]:checked').each(function () {
                    selectedServices.push($(this).val());
                });
                var personCount = $("#PersonNumber").val() || 1;
                var days = calculateDays();

                if (!areDatesValid() || !roomTypeId) {
                    $("#totalPrice").text('0 TL');
                    $("#priceDetails").html('<p class="text-muted">Fiyat hesaplaması için lütfen geçerli tarih ve oda tipi seçiniz.</p>');
                    return;
                }

                // Önce oda tipinin fiyatını al
                $.ajax({
                    url: '@Url.Action("GetRoomTypePrice", "Reservation")',
                    type: 'GET',
                    data: { roomTypeId: roomTypeId },
                    success: function (response) {
                        if (response.success) {
                            var basePrice = response.price * days;
                            
                            // Kişi sayısına göre ek ücret hesapla
                            var totalRoomPrice = basePrice;
                            if (personCount > 1) {
                                var additionalPersonFee = basePrice * 0.30 * (personCount - 1);
                                totalRoomPrice = basePrice + additionalPersonFee;
                            }

                            // Ek hizmet fiyatlarını topla
                            var serviceTotal = 0;
                            selectedServices.forEach(function (serviceId) {
                                var servicePrice = parseFloat($('input[value="' + serviceId + '"]').data('price')) || 0;
                                serviceTotal += servicePrice;
                            });

                            // Toplam fiyatı güncelle
                            var totalPrice = totalRoomPrice + serviceTotal;
                            $("#totalPrice").text(totalPrice.toLocaleString('tr-TR') + ' TL');

                            // Fiyat detaylarını göster
                            var priceDetails = 
                                `<p>Oda Ücreti (${days} gün): ${basePrice.toLocaleString('tr-TR')} TL</p>`;
                            
                            if (personCount > 1) {
                                priceDetails += 
                                    `<p>Ek Kişi Ücreti (${personCount - 1} kişi): ${additionalPersonFee.toLocaleString('tr-TR')} TL</p>`;
                            }
                            
                            if (serviceTotal > 0) {
                                priceDetails += 
                                    `<p>Ek Hizmetler: ${serviceTotal.toLocaleString('tr-TR')} TL</p>`;
                            }
                            
                            priceDetails += 
                                `<p><strong>Toplam: ${totalPrice.toLocaleString('tr-TR')} TL</strong></p>`;
                            
                            $("#priceDetails").html(priceDetails);
                        }
                    }
                });
            }

            // Gün sayısını hesapla
            function calculateDays() {
                var startDate = new Date($("#EnterDate").val());
                var endDate = new Date($("#ExitDate").val());
                if (!startDate || !endDate || endDate <= startDate) {
                    return 0;
                }
                var timeDiff = endDate.getTime() - startDate.getTime();
                var days = Math.ceil(timeDiff / (1000 * 3600 * 24));
                return days > 0 ? days : 0;
            }

            // Event listeners
            $("#RoomTypeId").change(calculateTotalPrice);
            $('input[name="SelectedAdditionalServiceIDs"]').change(calculateTotalPrice);
            $("#PersonNumber").change(calculateTotalPrice);
            $("#EnterDate, #ExitDate").change(calculateTotalPrice);

            // Sayfa yüklendiğinde kontrolleri başlat
            checkDatesAndEnableSelections();
        });
    </script>
}